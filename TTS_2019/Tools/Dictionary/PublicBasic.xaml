<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:TTS_2019.Tools.Dictionary">

    
    
    <!--TextBox文本输入框-->
    <Style TargetType="TextBox">
        <!--边框颜色：黑色-->
        <Setter Property="BorderBrush" Value="Black"/>  
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <!--边框粗度：左0，上0，右0，下1-->
        <Setter Property="BorderThickness" Value="0,0,0,1"/>        
    </Style>

    <!--TextBlock文本框-->
    <Style TargetType="TextBlock">       
        <!--边框粗度：左0，上0，右0，下1-->
        <!--<Setter Property="Foreground" Value="Black"/>-->
        <!--垂直：靠下-->
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <!--水平：向左-->
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>

    <!--PasswordBox密码框-->
    <Style TargetType="PasswordBox">
        <!--边框颜色：黑色-->
        <Setter Property="BorderBrush" Value="Black"/>       
        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <!--边框粗度：左0，上0，右0，下1-->
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
    </Style>
   
    <!--DatePicker日期框-->
    <Style TargetType="DatePicker">
        <!--边框颜色：黑色-->
        <Setter Property="BorderBrush" Value="Black"/>
        <!--边框粗度：左0，上0，右0，下1-->
        <Setter Property="Foreground" Value="Black"/>       
        <!--边框粗度：-->
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
    </Style>
    <!--DatePickerTextBox日期文本框-->
    <Style TargetType="DatePickerTextBox">
        <!--边框颜色：黑色-->
        <Setter Property="BorderBrush" Value="Black"/>
        <!--边框粗度：左0，上0，右0，下1-->
        <Setter Property="Foreground" Value="Black"/>
        <!--边框粗度：-->
        <Setter Property="BorderThickness" Value="0,0,0,0.5"/>
    </Style>
    <!--ComboBox下拉框-->
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="LightBlue"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <!--自定义动画资源-->
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="FocusedOn">
                            <!--关键帧动画-->
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <!--样条关键帧动画(SplineDoubleKeyFrame)-->
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="FocusedOff">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <!--自定义视觉树-->
                    <Grid>
                        <!-- 状态开关按钮（ToggleButton）和开关（Switch）也是由Button派生出来的-->
                        <ToggleButton x:Name="ToggleButton" Focusable="False" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press">
                            <ToggleButton.Background>
                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                    <GradientStop Color="SkyBlue"  Offset="0.849"/>
                                    <GradientStop Color="#FF5B5B5B" Offset="0.616"/>
                                    <GradientStop Color="White" Offset="0.767"/>
                                    <GradientStop Color="#FF4F4F4F" Offset="1"/>
                                </LinearGradientBrush>
                            </ToggleButton.Background>
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <!--自定义动画-->
                                    <ControlTemplate.Resources>
                                        <Storyboard x:Key="HoverOn">
                                            <DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BtnOver" Storyboard.TargetProperty="Opacity" To="0.8"/>
                                            <DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="Background_over" Storyboard.TargetProperty="Opacity" To="1"/>
                                        </Storyboard>
                                        <Storyboard x:Key="HoverOff">
                                            <DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BtnOver" Storyboard.TargetProperty="Opacity" To="0"/>
                                            <DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="Background_over" Storyboard.TargetProperty="Opacity" To="0"/>
                                        </Storyboard>
                                        <Storyboard x:Key="PressedOn">
                                            <DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BtnPress" Storyboard.TargetProperty="Opacity" To="0.8"/>
                                            <DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="Background_press" Storyboard.TargetProperty="Opacity" To="1"/>
                                            <DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BtnPress_highlight" Storyboard.TargetProperty="Opacity" To="1"/>
                                        </Storyboard>
                                        <Storyboard x:Key="PressedOff">
                                            <DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BtnPress" Storyboard.TargetProperty="Opacity" To="0"/>
                                            <DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="Background_press" Storyboard.TargetProperty="Opacity" To="0"/>
                                            <DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BtnPress_highlight" Storyboard.TargetProperty="Opacity" To="0"/>
                                        </Storyboard>
                                    </ControlTemplate.Resources>
                                    <!--自定义视觉树-->
                                    <Grid>
                                        <!--设置下拉框样式-->
                                        <Rectangle x:Name="Background"  RadiusX="3" RadiusY="3" IsHitTestVisible="false" Fill="Transparent" StrokeThickness="0,0,0,1">
                                            <!--设置下拉框为一条横线-->
                                            <Rectangle.Stroke>
                                                <LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
                                                    <GradientStop Color="White" Offset="0.95"/>   
                                                    <GradientStop Color="Black" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Rectangle.Stroke>
                                            <!--END设置下拉框颜色-->
                                        </Rectangle>
                                        <Rectangle x:Name="Background_over" Stroke="#FFABACAD" RadiusX="3" RadiusY="3" Opacity="0" IsHitTestVisible="False"/>
                                        <Rectangle x:Name="Background_press" Stroke="#FFABABAB" RadiusX="3" RadiusY="3" Opacity="0" IsHitTestVisible="False"/>
                                        <Border x:Name="BtnOver" Width="{TemplateBinding ActualWidth}" BorderBrush="#FFABABAB" BorderThickness="1" CornerRadius="3" Opacity="0" HorizontalAlignment="Right" Background="White">                                            
                                        </Border>
                                        <Border x:Name="BtnPress" Width="{TemplateBinding ActualWidth}" BorderBrush="White" BorderThickness="1" CornerRadius="3" Opacity="0" HorizontalAlignment="Right" Background="White">
                                           
                                        </Border>
                                        <Border x:Name="BtnPress_highlight" Margin="1" CornerRadius="2" Opacity="0" HorizontalAlignment="Right">
                                            <Border.Background>
                                                <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                                                    <GradientStop Color="#FF919191" Offset="0"/>
                                                    <GradientStop Color="#A5CED1D2" Offset="0.088"/>
                                                    <GradientStop Color="#0095D9FF" Offset="0.221"/>
                                                    <GradientStop Color="#0095D9FF" Offset="0.779"/>
                                                    <GradientStop Color="#A5CED1D2" Offset="0.912"/>
                                                    <GradientStop Color="#FF919191" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                        </Border>
                                        <Border x:Name="BtnOverlay" Margin="1" CornerRadius="2" HorizontalAlignment="Right">
                                            <Border.Background>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#00FFFFFF"/>
                                                    <GradientStop Color="#72FFFFFF" Offset="0.189"/>
                                                    <GradientStop Color="#72FFFFFF" Offset="0.5"/>
                                                    <GradientStop Color="#00FFFFFF" Offset="0.51"/>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                        </Border>
                                        <Path x:Name="BtnArrow" Margin="0,0,7,0" Width="10" Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z " HorizontalAlignment="Right" Stretch="Uniform">
                                            <Path.Fill>
                                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                    <GradientStop Color="#e6e6e6" Offset="0"/>
                                                    <GradientStop Color="White" Offset="1"/>
                                                </LinearGradientBrush>
                                            </Path.Fill>
                                        </Path>
                                        <Rectangle x:Name="DisabledVisualElement" Margin="1" Fill="#00FFFFFF" RadiusX="3" RadiusY="3" IsHitTestVisible="false" Visibility="Collapsed"/>
                                    </Grid>
                                    <!--自定义触发器-->
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Trigger.ExitActions>
                                                <!--StaticResource – 静态资源-->
                                                <!--StaticResource仅仅会被应用一次,在第一次需要资源时加载。而且这种引用方式不支持向前加载，所有的资源定义必须在引用之前定义。StaticResource通常用在： ·         
                                                设计的APP是将所有的资源放入Page或者App这个级别的Resource Dictionary中的，而且不需要在运行时重新计算—例如只保存一些松散文件，逻辑资源的声明等。 ·         
                                                不需要给DependencyObject或者Freezable的对象设置属性。 ·         
                                                Resource Dictionary将被编译进DLL. ·         
                                                需要给很多的Dependency Property赋值。 
                                           将一个资源以Static Resource引用，需要用到Static Resource Markup Extension。 它在已经定义的资源中查询特定key的value为XAML的某个属性赋值。这个查询的行为与load-time查找类似，在当前Page的XAML中或者所有Application的Resources中查找，并在运生成运行时对象。-->
                                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                                            </Trigger.ExitActions>
                                            <Trigger.EnterActions>
                                                <BeginStoryboard Storyboard="{StaticResource HoverOn}"/>
                                            </Trigger.EnterActions>
                                        </Trigger>
                                        <Trigger Property="IsChecked" Value="true"/>
                                        <Trigger Property="IsPressed" Value="True">
                                            <Trigger.ExitActions>
                                                <BeginStoryboard Storyboard="{StaticResource PressedOff}" x:Name="PressedOff_BeginStoryboard"/>
                                            </Trigger.ExitActions>
                                            <Trigger.EnterActions>
                                                <BeginStoryboard Storyboard="{StaticResource PressedOn}" x:Name="PressedOn_BeginStoryboard"/>
                                            </Trigger.EnterActions>
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <!--DynamicResource – 动态资源-->
                                            <!--与Static Resource不同的是，Dynamic Resource可以在程序运行时重新评估/计算资源来生成对应的对象/值，它支持向前引用，只要请求的key在整个应用程序内的任何Resources Dictionary定义过就可以被加载。如果有多个相同的key存在，则最后搜索到的资源为有效。-->
                                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                                            <Setter Property="Visibility" TargetName="DisabledVisualElement" Value="Visible"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <!--ContentPresenter通常出现在ControlTemplate內,且若不使用ContentPresenter则Content属性就无法正常显示。 -->
                        <ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>
                        <TextBox Visibility="Hidden" HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="PART_EditableTextBox" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}">
                            <TextBox.Template>
                                <ControlTemplate TargetType="{x:Type TextBox}">
                                    <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <Rectangle x:Name="DisabledVisualElement" Fill="#A5FFFFFF" RadiusX="4" RadiusY="4" IsHitTestVisible="false" Visibility="Collapsed"/>
                        <Rectangle x:Name="FocusVisualElement" Margin="-1" Stroke="White" StrokeThickness="1" RadiusX="4" RadiusY="4" IsHitTestVisible="false" Opacity="0"/>
                        <!--下拉框下拉样式-->
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" x:Name="Popup" Focusable="False" AllowsTransparency="True" PopupAnimation="Slide">
                            <Grid MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                <!--下拉框下拉边框样式-->
                                <Border x:Name="DropDownBorder" Background="White" BorderThickness="1" CornerRadius="1,1,3,3">
                                    <Border.BorderBrush>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="SkyBlue" Offset="0"/>
                                            <GradientStop Color="DodgerBlue" Offset="0.5"/>
                                        </LinearGradientBrush>
                                    </Border.BorderBrush>
                                    <!--END下拉框下拉边框样式-->
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" CanContentScroll="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                        <!--下拉框下拉样式-->
                    </Grid>
                    <!--自定义触发器-->
                    <ControlTemplate.Triggers>
                        <!--获取焦点-->
                        <Trigger Property="IsFocused" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource FocusedOff}" x:Name="FocusedOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource FocusedOn}"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="SkyBlue"/>
                            <Setter Property="Visibility" TargetName="DisabledVisualElement" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                            <Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
                            <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--ComboBoxItem下拉项-->
    <Style  TargetType="{x:Type ComboBoxItem}" >      
        <Setter Property="Height" Value="24"/>
        <!--下拉样式的大小-->
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverOn">
                            <DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BackgroundGradientOver" Storyboard.TargetProperty="Opacity" To="0.73"/>
                        </Storyboard>
                        <Storyboard x:Key="HoverOff">
                            <DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BackgroundGradientOver" Storyboard.TargetProperty="Opacity" To="0"/>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOn">
                            <DoubleAnimation Duration="00:00:00.1000000" Storyboard.TargetName="BackgroundGradientSelected" Storyboard.TargetProperty="Opacity" To="0.84"/>
                        </Storyboard>
                        <Storyboard x:Key="SelectedOff">
                            <DoubleAnimation Duration="00:00:00.4000000" Storyboard.TargetName="BackgroundGradientSelected" Storyboard.TargetProperty="Opacity" To="0"/>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Grid SnapsToDevicePixels="true" FocusVisualStyle="{x:Null}">
                        <Rectangle x:Name="BackgroundGradientOver" FocusVisualStyle="{x:Null}" RadiusX="2" RadiusY="2" Opacity="0" Fill="Transparent" StrokeThickness="0,0,0,1">
                            <!--设置下拉框为一条横线-->
                            <Rectangle.Stroke>
                                <LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
                                    <GradientStop Color="White" Offset="0.95"/>
                                    <GradientStop Color="Black" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="BackgroundGradientSelected" FocusVisualStyle="{x:Null}" RadiusX="2" RadiusY="2" Opacity="0" Fill="Transparent" StrokeThickness="0,0,0,1">
                            <!--设置下拉框为一条横线-->
                            <Rectangle.Stroke>
                                <LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
                                    <GradientStop Color="White" Offset="0.95"/>
                                    <GradientStop Color="SkyBlue" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.Stroke>
                        </Rectangle>
                        <Rectangle x:Name="BackgroundHighlight" FocusVisualStyle="{x:Null}" Margin="1" Stroke="#A0FFFFFF" RadiusX="1" RadiusY="1"/>
                        <ContentPresenter FocusVisualStyle="{x:Null}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="contentPresenter" Margin="{TemplateBinding Padding}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOff}" x:Name="HoverOff_BeginStoryboard"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverOn}" x:Name="HoverOn_BeginStoryboard"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="true"/>
                        <Trigger Property="Selector.IsSelected" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOff}" x:Name="SelectedOff_BeginStoryboard1"/>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SelectedOn}" x:Name="SelectedOn_BeginStoryboard1"/>
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Foreground" Value="Blue"/>
                <Setter Property="Height" Value="24"/>
            </Trigger>
        </Style.Triggers>
    </Style>
      
    <!--按钮样式  蟹蓝色-->
    <Style x:Key="Button_Style4" TargetType="Button">
        <Setter Property="Background" Value="#FF83B7E2"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="BorderBrush" Value="#FF83B7E2"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"></Setter>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TransformGroup>
                    <ScaleTransform></ScaleTransform>
                    <SkewTransform></SkewTransform>
                    <RotateTransform></RotateTransform>
                    <TranslateTransform></TranslateTransform>
                </TransformGroup>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="OnMouseEnterl">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0:0:0.6" Value="#FF14AAE4"></EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>

                        </Storyboard>
                        <Storyboard x:Key="OnMouseLeavel">
                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0:0:0.6" Value="#FF83B7E2"></EasingColorKeyFrame>
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseAnimation_1">
                            <DoubleAnimation From="2" To="0" Duration="0:0:0.2" Storyboard.TargetProperty="RenderTransform.Children[3].Y">
                                <DoubleAnimation.EasingFunction>
                                    <ElasticEase Oscillations="20"></ElasticEase>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"></ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="UIElement.MouseLeave">
                            <BeginStoryboard Storyboard="{StaticResource OnMouseLeavel}"></BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="UIElement.MouseEnter">
                            <BeginStoryboard Storyboard="{StaticResource MouseAnimation_1}"></BeginStoryboard>
                            <BeginStoryboard Storyboard="{StaticResource OnMouseEnterl}"></BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>







    <!--DataGrid的样式1-->
    <Style TargetType="DataGrid">
        <!--拖动改变单元格大小-->
        <Setter Property="CanUserResizeColumns" Value="false"/>
        <!--网格线颜色-->
        <Setter Property="HorizontalGridLinesBrush">
            <Setter.Value>
                <SolidColorBrush Color="LightBlue"/>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalGridLinesBrush">
            <Setter.Value>
                <SolidColorBrush Color="LightBlue"/>
            </Setter.Value>
        </Setter>
    </Style>
    <!--DataGridColumnHeader标题栏样式-->
    <Style  TargetType="DataGridColumnHeader" >
        <!--字体大小-->
        <Setter Property="FontSize" Value="13" />
        <!--加粗-->
        <Setter  Property="FontWeight"  Value="DemiBold"/>
        <Setter Property="FontFamily" Value="MingLiU_HKSCS-ExtB"/>
        <!--内容居中-->
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <!--DataGridRow行样式触发-->
    <Style  TargetType="DataGridRow">
        <!--背景色改变必须先设置cellStyle 因为cellStyle会覆盖rowStyle样式
        表格行高-->
        <Setter Property="Height" Value="26"/>
        <Setter Property="FontSize" Value="13" />
        <!--内容居中-->
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <!--隔行换色-->
            <Trigger Property="AlternationIndex" Value="0" >
                <Setter Property="Background" Value="#f2f2f2" />
            </Trigger>
            <Trigger Property="AlternationIndex" Value="1" >
                <Setter Property="Background" Value="White" />
            </Trigger>
            <!--选择行改变表格颜色-->
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="Red" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
            <!--鼠标移出改变表格背景色-->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightGray"/>
                <Setter Property="FontSize" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--DataGridCell单元格样式触发-->
    <Style TargetType="DataGridCell">
        <!--内容居中-->
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="LightGray"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="Red"/>
                <Setter Property="FontSize" Value="14" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--DataGrid的样式2:没应用-->
    <Style x:Key="DataGridStyle" TargetType="DataGrid">
        <Setter Property="ColumnHeaderStyle" Value="{DynamicResource ColumnHeaderStyle}"></Setter>
        <Setter Property="CellStyle" Value="{DynamicResource CellStyle}"></Setter>
        <Setter Property="RowStyle" Value="{DynamicResource RowStyle}"></Setter>
        <Setter Property="Background" Value="White"></Setter>
        <Setter Property="EnableRowVirtualization" Value="False"></Setter>
        <Setter Property="GridLinesVisibility" Value="None"></Setter>
        <Setter Property="CanUserAddRows" Value="False"></Setter>
        <!--禁止在尾行手动添加数据-->
        <Setter Property="AutoGenerateColumns" Value="False"></Setter>
        <Setter Property="IsEnabled" Value="True"></Setter>
    </Style>
    <Style x:Key="ColumnHeaderStyle" TargetType="DataGridColumnHeader">
        <Setter Property="FontWeight"  Value="Black"/>
        <Setter Property="Height" Value="28"></Setter>
        <Setter Property="Background" Value="#f2f2f2"></Setter><!--F2F2F2-->
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="LightBlue"></Setter><!--CBCBCB-->
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <!--水平居中-->
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <!--垂直居中-->
    </Style>
    <Style x:Key="RowStyle" TargetType="DataGridRow">
        <Setter Property="Height" Value="26"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#F2F2F2"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background"  Value="LightBlue" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CellStyle" TargetType="DataGridCell">
        <Setter Property="Height" Value="26.1"></Setter>
        <Setter Property="FontSize" Value="13"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <Border x:Name="Bg" Background="Transparent" BorderThickness="1" UseLayoutRounding="True" BorderBrush="LightBlue"><!--FFCBCBCB-->
                        <ContentPresenter HorizontalAlignment="Center"  VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background"  Value="#CBCBCB" />
                <Setter Property="Foreground" Value="#000000" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--自定义ToolTip样式-->
    <Style TargetType="ToolTip">
        <Setter Property="Background" Value="#FFFFFDEF"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="FontFamily" Value="ArialMT"/>
        <Setter Property="HorizontalOffset" Value="-16"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <Grid.RowDefinitions>
                            <RowDefinition></RowDefinition>
                            <RowDefinition Height="5*"></RowDefinition>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition></ColumnDefinition>
                            <ColumnDefinition Width="1*"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Viewbox Grid.Row="0" Grid.Column="0" Stretch="Uniform"	HorizontalAlignment="Left" Margin="10,0,0,0">
                            <Path Data="M48.75,116.75 L40.5,124 57.25,124 z" Fill="{TemplateBinding Background}"  HorizontalAlignment="Left" Height="8.25"  Stretch="Fill" Stroke="#FFBDE1FF" VerticalAlignment="Top" Width="17.75"/>
                        </Viewbox>
                        <Border Grid.Row="1" x:Name="Root" Grid.ColumnSpan="2"  CornerRadius="6" Margin="0,-2,0,0"
                                  BorderBrush="#FF00256F" BorderThickness=".4"  Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                            <Border.Resources>
                                <Storyboard x:Key="Visible State"/>
                                <Storyboard x:Key="Normal State"/>
                            </Border.Resources>
                            <ContentPresenter TextBlock.Foreground="#FF14B8D4" TextBlock.FontFamily="ArialMT"
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              Cursor="{TemplateBinding Cursor}"
                              Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--开始：模块按钮：开始界面-->
    <Style x:Key="OperationFlowHover" TargetType="Grid">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#FF89ADD8"></Setter>
                <Setter Property="Cursor" Value="Hand"></Setter>
                <Setter Property="Height" Value="60"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>